# This Dockerfile will build an image with decord with gpu support and objective-metrics-package
# Due to nvidia/cuda base image, cuda and nvidia drivers from host machine will be mounted
# So, you need to have preinstalled cuda and nvidia-container-toolkit on host, see nvidia/cuda docs

FROM nvidia/cuda:12.0.1-devel-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Europe/Moscow

RUN apt-get update && apt-get -y install git ffmpeg

# Timezone Moscow
RUN apt-get -y install tzdata
RUN cp /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install Ffmpeg static build with libvmaf (https://johnvansickle.com/ffmpeg/)
RUN apt-get -y install wget xz-utils
RUN wget https://johnvansickle.com/ffmpeg/builds/ffmpeg-git-amd64-static.tar.xz
RUN tar xvf ffmpeg-git-amd64-static.tar.xz
RUN cp -r ffmpeg-git-*-amd64-static/model /usr/local/share/
RUN mv ffmpeg-git-*-amd64-static/ffmpeg ffmpeg-git-*-amd64-static/ffprobe /usr/local/bin/

# <----------------- Build Decord with GPU ----------------->
# Install the system packages for building the shared library
RUN apt-get install -y build-essential python3-dev python3-setuptools python3-pip make cmake
RUN apt-get install -y libavcodec-dev libavfilter-dev libavformat-dev libavutil-dev

# Clone the repo
RUN git clone --recursive https://github.com/dmlc/decord

# Build the shared library
WORKDIR /decord
RUN mkdir build
WORKDIR /decord/build
ADD libnvcuvid.so /usr/local/cuda/
RUN cmake .. -DUSE_CUDA=ON -DCMAKE_BUILD_TYPE=Release
RUN make

# Install python bindings
WORKDIR /decord/python
RUN python3 setup.py install --user
# <--------------------------------------------------------->

# Install objective-metrics package
RUN pip install objective-metrics

# Make a storage
WORKDIR /app

ENTRYPOINT ["objective_metrics_run"]
